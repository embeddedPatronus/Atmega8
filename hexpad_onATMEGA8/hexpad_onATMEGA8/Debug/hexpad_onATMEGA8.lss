
hexpad_onATMEGA8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  00000948  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006a5  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e5  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000044b  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e4  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000157  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014b  00000000  00000000  000018fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e9       	ldi	r30, 0x9C	; 156
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	7a d0       	rcall	.+244    	; 0x14e <main>
  5a:	9e c0       	rjmp	.+316    	; 0x198 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <check1>:
	}

void check1()
{ while(1)
	{
	  DDRC=0x10;
  5e:	d0 e1       	ldi	r29, 0x10	; 16
	  PORTC=0xEF;
  60:	cf ee       	ldi	r28, 0xEF	; 239
	}

void check1()
{ while(1)
	{
	  DDRC=0x10;
  62:	d4 bb       	out	0x14, r29	; 20
	  PORTC=0xEF;
  64:	c5 bb       	out	0x15, r28	; 21
	
	  checkrowA();
  66:	2b d0       	rcall	.+86     	; 0xbe <checkrowA>
	  checkrowB();
  68:	03 d0       	rcall	.+6      	; 0x70 <checkrowB>
	  checkrowC();
  6a:	03 d0       	rcall	.+6      	; 0x72 <checkrowC>
	  checkrowD();
  6c:	03 d0       	rcall	.+6      	; 0x74 <checkrowD>
  6e:	f9 cf       	rjmp	.-14     	; 0x62 <check1+0x4>

00000070 <checkrowB>:
	   if(PINC1==0)
	  {
		  
		  dat('4');
	  }
	  }	  
  70:	08 95       	ret

00000072 <checkrowC>:
	   if(PINC2==0)
	  {
		  
		  dat('7');
	  }
	  }	  
  72:	08 95       	ret

00000074 <checkrowD>:
	  {
		  
		  dat('*');
	  }
	 	  
	  }
  74:	08 95       	ret

00000076 <cmd>:
void cmd(unsigned int x)
{
PORTB=0X00;
  76:	18 ba       	out	0x18, r1	; 24
PORTD=x;
  78:	82 bb       	out	0x12, r24	; 18
PORTB |=0X02;
  7a:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	87 e8       	ldi	r24, 0x87	; 135
  7e:	93 e1       	ldi	r25, 0x13	; 19
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <cmd+0xa>
  84:	00 c0       	rjmp	.+0      	; 0x86 <cmd+0x10>
  86:	00 00       	nop
_delay_ms(20);
PORTB=0X00;
  88:	18 ba       	out	0x18, r1	; 24
}
  8a:	08 95       	ret

0000008c <dat>:
void dat(unsigned int x)

{PORTB=0X01;
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	98 bb       	out	0x18, r25	; 24
PORTD=x;
  90:	82 bb       	out	0x12, r24	; 18
PORTB |=0X02;
  92:	c1 9a       	sbi	0x18, 1	; 24
  94:	e7 ea       	ldi	r30, 0xA7	; 167
  96:	f1 e6       	ldi	r31, 0x61	; 97
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <dat+0xc>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <dat+0x12>
  9e:	00 00       	nop
_delay_ms(100);
PORTB=0X01;
  a0:	98 bb       	out	0x18, r25	; 24
}
  a2:	08 95       	ret

000000a4 <init>:
void init()
{
cmd(0X38);
  a4:	88 e3       	ldi	r24, 0x38	; 56
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	e6 df       	rcall	.-52     	; 0x76 <cmd>
cmd(0X06);
  aa:	86 e0       	ldi	r24, 0x06	; 6
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	e3 df       	rcall	.-58     	; 0x76 <cmd>
cmd(0X0E);
  b0:	8e e0       	ldi	r24, 0x0E	; 14
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	e0 df       	rcall	.-64     	; 0x76 <cmd>
cmd(0X01);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	dd df       	rcall	.-70     	; 0x76 <cmd>
}
  bc:	08 95       	ret

000000be <checkrowA>:
	  void checkrowA()
	  {
		  
	  if(PINC0==0)
	  {
		  init();
  be:	f2 df       	rcall	.-28     	; 0xa4 <init>
		  dat('1');
  c0:	81 e3       	ldi	r24, 0x31	; 49
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	e3 df       	rcall	.-58     	; 0x8c <dat>
	  }
	  }
  c6:	08 95       	ret

000000c8 <digit>:

void digit(unsigned int i)
{
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	8c 01       	movw	r16, r24
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	50 f4       	brcc	.+20     	; 0xf0 <digit+0x28>
}

void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
  dc:	c1 e0       	ldi	r28, 0x01	; 1
  de:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(i>9)
	{
		k=k*10;
  e0:	20 2f       	mov	r18, r16
  e2:	01 2f       	mov	r16, r17
	}
	while(k>0)
	{
		dat((h/k)+48);
	    h=h%k;
		k=k/10;
  e4:	0f 2e       	mov	r0, r31
  e6:	fa e0       	ldi	r31, 0x0A	; 10
  e8:	ef 2e       	mov	r14, r31
  ea:	ff 24       	eor	r15, r15
  ec:	f0 2d       	mov	r31, r0
  ee:	18 c0       	rjmp	.+48     	; 0x120 <digit+0x58>
}

void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
  f0:	c1 e0       	ldi	r28, 0x01	; 1
  f2:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(i>9)
	{
		k=k*10;
		i=i/10;
  f4:	ea e0       	ldi	r30, 0x0A	; 10
  f6:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
	{
		k=k*10;
  f8:	9e 01       	movw	r18, r28
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	cc 0f       	add	r28, r28
 100:	dd 1f       	adc	r29, r29
 102:	cc 0f       	add	r28, r28
 104:	dd 1f       	adc	r29, r29
 106:	cc 0f       	add	r28, r28
 108:	dd 1f       	adc	r29, r29
 10a:	c2 0f       	add	r28, r18
 10c:	d3 1f       	adc	r29, r19
		i=i/10;
 10e:	bf 01       	movw	r22, r30
 110:	2f d0       	rcall	.+94     	; 0x170 <__udivmodhi4>
 112:	cb 01       	movw	r24, r22
void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
 114:	6a 30       	cpi	r22, 0x0A	; 10
 116:	71 05       	cpc	r23, r1
 118:	78 f7       	brcc	.-34     	; 0xf8 <digit+0x30>
	{
		k=k*10;
		i=i/10;
	}
	while(k>0)
 11a:	20 97       	sbiw	r28, 0x00	; 0
 11c:	09 f7       	brne	.-62     	; 0xe0 <digit+0x18>
 11e:	10 c0       	rjmp	.+32     	; 0x140 <digit+0x78>
	{
		dat((h/k)+48);
 120:	82 2f       	mov	r24, r18
 122:	90 2f       	mov	r25, r16
 124:	be 01       	movw	r22, r28
 126:	24 d0       	rcall	.+72     	; 0x170 <__udivmodhi4>
 128:	18 2f       	mov	r17, r24
 12a:	09 2f       	mov	r16, r25
 12c:	cb 01       	movw	r24, r22
 12e:	c0 96       	adiw	r24, 0x30	; 48
 130:	ad df       	rcall	.-166    	; 0x8c <dat>
	    h=h%k;
 132:	21 2f       	mov	r18, r17
		k=k/10;
 134:	ce 01       	movw	r24, r28
 136:	b7 01       	movw	r22, r14
 138:	1b d0       	rcall	.+54     	; 0x170 <__udivmodhi4>
 13a:	eb 01       	movw	r28, r22
	while(i>9)
	{
		k=k*10;
		i=i/10;
	}
	while(k>0)
 13c:	20 97       	sbiw	r28, 0x00	; 0
 13e:	81 f7       	brne	.-32     	; 0x120 <digit+0x58>
	{
		dat((h/k)+48);
	    h=h%k;
		k=k/10;
	}		
	}		
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	08 95       	ret

0000014e <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{   
	init();
 14e:	aa df       	rcall	.-172    	; 0xa4 <init>
	DDRD=0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
 154:	87 bb       	out	0x17, r24	; 23
	check1();
 156:	83 df       	rcall	.-250    	; 0x5e <check1>
	

	}
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

0000015e <check2>:
	  checkrowD();
	}	
}
void check2()
{	
	 DDRC=0x20;
 15e:	80 e2       	ldi	r24, 0x20	; 32
 160:	84 bb       	out	0x14, r24	; 20
	 PORTC=0xDF;
 162:	8f ed       	ldi	r24, 0xDF	; 223
 164:	85 bb       	out	0x15, r24	; 21
	  checkrowA();
 166:	ab df       	rcall	.-170    	; 0xbe <checkrowA>
	  checkrowB();
 168:	83 df       	rcall	.-250    	; 0x70 <checkrowB>
	  checkrowC();
 16a:	83 df       	rcall	.-250    	; 0x72 <checkrowC>
	  checkrowD();
 16c:	83 df       	rcall	.-250    	; 0x74 <checkrowD>
}	
 16e:	08 95       	ret

00000170 <__udivmodhi4>:
 170:	aa 1b       	sub	r26, r26
 172:	bb 1b       	sub	r27, r27
 174:	51 e1       	ldi	r21, 0x11	; 17
 176:	07 c0       	rjmp	.+14     	; 0x186 <__udivmodhi4_ep>

00000178 <__udivmodhi4_loop>:
 178:	aa 1f       	adc	r26, r26
 17a:	bb 1f       	adc	r27, r27
 17c:	a6 17       	cp	r26, r22
 17e:	b7 07       	cpc	r27, r23
 180:	10 f0       	brcs	.+4      	; 0x186 <__udivmodhi4_ep>
 182:	a6 1b       	sub	r26, r22
 184:	b7 0b       	sbc	r27, r23

00000186 <__udivmodhi4_ep>:
 186:	88 1f       	adc	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	5a 95       	dec	r21
 18c:	a9 f7       	brne	.-22     	; 0x178 <__udivmodhi4_loop>
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	bc 01       	movw	r22, r24
 194:	cd 01       	movw	r24, r26
 196:	08 95       	ret

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
