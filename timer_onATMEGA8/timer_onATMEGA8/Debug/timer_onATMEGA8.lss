
timer_onATMEGA8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000636  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001d0  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000460  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f4  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012f  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000291  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e1       	ldi	r30, 0x1A	; 26
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	c4 d0       	rcall	.+392    	; 0x1e2 <main>
  5a:	dd c0       	rjmp	.+442    	; 0x216 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <cmd>:
void cmd(unsigned int x)
{
PORTB=0X00;
  5e:	18 ba       	out	0x18, r1	; 24
PORTD=x;
  60:	82 bb       	out	0x12, r24	; 18
PORTB |=0X02;
  62:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  64:	87 ea       	ldi	r24, 0xA7	; 167
  66:	91 e6       	ldi	r25, 0x61	; 97
  68:	01 97       	sbiw	r24, 0x01	; 1
  6a:	f1 f7       	brne	.-4      	; 0x68 <cmd+0xa>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <cmd+0x10>
  6e:	00 00       	nop
_delay_ms(100);
PORTB=0X00;
  70:	18 ba       	out	0x18, r1	; 24
}
  72:	08 95       	ret

00000074 <dat>:
void dat(unsigned int x)

{PORTB=0X01;
  74:	91 e0       	ldi	r25, 0x01	; 1
  76:	98 bb       	out	0x18, r25	; 24
PORTD=x;
  78:	82 bb       	out	0x12, r24	; 18
PORTB |=0X02;
  7a:	c1 9a       	sbi	0x18, 1	; 24
  7c:	e7 ea       	ldi	r30, 0xA7	; 167
  7e:	f1 e6       	ldi	r31, 0x61	; 97
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <dat+0xc>
  84:	00 c0       	rjmp	.+0      	; 0x86 <dat+0x12>
  86:	00 00       	nop
_delay_ms(100);
PORTB=0X01;
  88:	98 bb       	out	0x18, r25	; 24
}
  8a:	08 95       	ret

0000008c <init>:
void init()
{
cmd(0X38);
  8c:	88 e3       	ldi	r24, 0x38	; 56
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	e6 df       	rcall	.-52     	; 0x5e <cmd>
cmd(0X06);
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	e3 df       	rcall	.-58     	; 0x5e <cmd>
cmd(0X0E);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	e0 df       	rcall	.-64     	; 0x5e <cmd>
cmd(0X01);
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	dd df       	rcall	.-70     	; 0x5e <cmd>
}
  a4:	08 95       	ret

000000a6 <digit>:

void digit(unsigned int i)
{
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	8c 01       	movw	r16, r24
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
  b4:	8a 30       	cpi	r24, 0x0A	; 10
  b6:	91 05       	cpc	r25, r1
  b8:	50 f4       	brcc	.+20     	; 0xce <digit+0x28>
}

void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
  ba:	c1 e0       	ldi	r28, 0x01	; 1
  bc:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(i>9)
	{
		k=k*10;
  be:	20 2f       	mov	r18, r16
  c0:	01 2f       	mov	r16, r17
	}
	while(k>0)
	{
		dat((h/k)+48);
	    h=h%k;
		k=k/10;
  c2:	0f 2e       	mov	r0, r31
  c4:	fa e0       	ldi	r31, 0x0A	; 10
  c6:	ef 2e       	mov	r14, r31
  c8:	ff 24       	eor	r15, r15
  ca:	f0 2d       	mov	r31, r0
  cc:	18 c0       	rjmp	.+48     	; 0xfe <digit+0x58>
}

void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
  ce:	c1 e0       	ldi	r28, 0x01	; 1
  d0:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(i>9)
	{
		k=k*10;
		i=i/10;
  d2:	ea e0       	ldi	r30, 0x0A	; 10
  d4:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
	{
		k=k*10;
  d6:	9e 01       	movw	r18, r28
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	cc 0f       	add	r28, r28
  de:	dd 1f       	adc	r29, r29
  e0:	cc 0f       	add	r28, r28
  e2:	dd 1f       	adc	r29, r29
  e4:	cc 0f       	add	r28, r28
  e6:	dd 1f       	adc	r29, r29
  e8:	c2 0f       	add	r28, r18
  ea:	d3 1f       	adc	r29, r19
		i=i/10;
  ec:	bf 01       	movw	r22, r30
  ee:	7f d0       	rcall	.+254    	; 0x1ee <__udivmodhi4>
  f0:	cb 01       	movw	r24, r22
void digit(unsigned int i)
{
	unsigned int h=i;
	unsigned int k=1;
	
	while(i>9)
  f2:	6a 30       	cpi	r22, 0x0A	; 10
  f4:	71 05       	cpc	r23, r1
  f6:	78 f7       	brcc	.-34     	; 0xd6 <digit+0x30>
	{
		k=k*10;
		i=i/10;
	}
	while(k>0)
  f8:	20 97       	sbiw	r28, 0x00	; 0
  fa:	09 f7       	brne	.-62     	; 0xbe <digit+0x18>
  fc:	10 c0       	rjmp	.+32     	; 0x11e <digit+0x78>
	{
		dat((h/k)+48);
  fe:	82 2f       	mov	r24, r18
 100:	90 2f       	mov	r25, r16
 102:	be 01       	movw	r22, r28
 104:	74 d0       	rcall	.+232    	; 0x1ee <__udivmodhi4>
 106:	18 2f       	mov	r17, r24
 108:	09 2f       	mov	r16, r25
 10a:	cb 01       	movw	r24, r22
 10c:	c0 96       	adiw	r24, 0x30	; 48
 10e:	b2 df       	rcall	.-156    	; 0x74 <dat>
	    h=h%k;
 110:	21 2f       	mov	r18, r17
		k=k/10;
 112:	ce 01       	movw	r24, r28
 114:	b7 01       	movw	r22, r14
 116:	6b d0       	rcall	.+214    	; 0x1ee <__udivmodhi4>
 118:	eb 01       	movw	r28, r22
	while(i>9)
	{
		k=k*10;
		i=i/10;
	}
	while(k>0)
 11a:	20 97       	sbiw	r28, 0x00	; 0
 11c:	81 f7       	brne	.-32     	; 0xfe <digit+0x58>
	{
		dat((h/k)+48);
	    h=h%k;
		k=k/10;
	}		
	}		
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	08 95       	ret

0000012c <timer>:
				  
}

void timer()
{
	TCCR0=0x05;
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	83 bf       	out	0x33, r24	; 51
	
	TCNT0=0x30;
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	82 bf       	out	0x32, r24	; 50
while((TIFR&0x01)==0x00);
 134:	08 b6       	in	r0, 0x38	; 56
 136:	00 fe       	sbrs	r0, 0
 138:	fd cf       	rjmp	.-6      	; 0x134 <timer+0x8>
{
	TIFR=0x01;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	88 bf       	out	0x38, r24	; 56
}	
}
 13e:	08 95       	ret

00000140 <delay>:

void delay()
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cf e1       	ldi	r28, 0x1F	; 31
 146:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=0;i<=30;i++)
	timer();
 148:	f1 df       	rcall	.-30     	; 0x12c <timer>
 14a:	21 97       	sbiw	r28, 0x01	; 1
}	
}

void delay()
{
	for(int i=0;i<=30;i++)
 14c:	e9 f7       	brne	.-6      	; 0x148 <delay+0x8>
	timer();
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <RADO>:

int RADO()
{
 154:	af 92       	push	r10
 156:	bf 92       	push	r11
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
	for(int i=0;i<60;i++)
 168:	ee 24       	eor	r14, r14
 16a:	ff 24       	eor	r15, r15
	{cmd(0x01);
		
	for(int j=0;j<60;j++)
 16c:	aa 24       	eor	r10, r10
 16e:	bb 24       	eor	r11, r11
{cmd(0x01);
for(int k=0;k<60;k++)
 170:	da 2c       	mov	r13, r10
 172:	cb 2c       	mov	r12, r11
}

int RADO()
{
	for(int i=0;i<60;i++)
	{cmd(0x01);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	72 df       	rcall	.-284    	; 0x5e <cmd>
		
	for(int j=0;j<60;j++)
 17a:	85 01       	movw	r16, r10
{cmd(0x01);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	6e df       	rcall	.-292    	; 0x5e <cmd>
for(int k=0;k<60;k++)
 182:	cd 2d       	mov	r28, r13
 184:	dc 2d       	mov	r29, r12
{
	digit(i);
 186:	c7 01       	movw	r24, r14
 188:	8e df       	rcall	.-228    	; 0xa6 <digit>
	dat(':');
 18a:	8a e3       	ldi	r24, 0x3A	; 58
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	72 df       	rcall	.-284    	; 0x74 <dat>
digit(j);
 190:	c8 01       	movw	r24, r16
 192:	89 df       	rcall	.-238    	; 0xa6 <digit>
dat(':');
 194:	8a e3       	ldi	r24, 0x3A	; 58
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	6d df       	rcall	.-294    	; 0x74 <dat>
digit(k);
 19a:	ce 01       	movw	r24, r28
 19c:	84 df       	rcall	.-248    	; 0xa6 <digit>
cmd(0x80);
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	5d df       	rcall	.-326    	; 0x5e <cmd>
cmd(0x0c);
 1a4:	8c e0       	ldi	r24, 0x0C	; 12
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	5a df       	rcall	.-332    	; 0x5e <cmd>
delay();
 1aa:	ca df       	rcall	.-108    	; 0x140 <delay>
	for(int i=0;i<60;i++)
	{cmd(0x01);
		
	for(int j=0;j<60;j++)
{cmd(0x01);
for(int k=0;k<60;k++)
 1ac:	21 96       	adiw	r28, 0x01	; 1
 1ae:	cc 33       	cpi	r28, 0x3C	; 60
 1b0:	d1 05       	cpc	r29, r1
 1b2:	49 f7       	brne	.-46     	; 0x186 <RADO+0x32>
int RADO()
{
	for(int i=0;i<60;i++)
	{cmd(0x01);
		
	for(int j=0;j<60;j++)
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
 1b8:	0c 33       	cpi	r16, 0x3C	; 60
 1ba:	11 05       	cpc	r17, r1
 1bc:	f9 f6       	brne	.-66     	; 0x17c <RADO+0x28>
	timer();
}

int RADO()
{
	for(int i=0;i<60;i++)
 1be:	08 94       	sec
 1c0:	e1 1c       	adc	r14, r1
 1c2:	f1 1c       	adc	r15, r1
 1c4:	8c e3       	ldi	r24, 0x3C	; 60
 1c6:	e8 16       	cp	r14, r24
 1c8:	f1 04       	cpc	r15, r1
 1ca:	a1 f6       	brne	.-88     	; 0x174 <RADO+0x20>
cmd(0x0c);
delay();
}
	}
	}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	bf 90       	pop	r11
 1de:	af 90       	pop	r10
 1e0:	08 95       	ret

000001e2 <main>:



int main()
{   
	DDRD=0XFF;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	81 bb       	out	0x11, r24	; 17
	DDRB=0XFF;
 1e6:	87 bb       	out	0x17, r24	; 23
    
	while(1)
    { init();
 1e8:	51 df       	rcall	.-350    	; 0x8c <init>
	  RADO();
 1ea:	b4 df       	rcall	.-152    	; 0x154 <RADO>
 1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <main+0x6>

000001ee <__udivmodhi4>:
 1ee:	aa 1b       	sub	r26, r26
 1f0:	bb 1b       	sub	r27, r27
 1f2:	51 e1       	ldi	r21, 0x11	; 17
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <__udivmodhi4_ep>

000001f6 <__udivmodhi4_loop>:
 1f6:	aa 1f       	adc	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	a6 17       	cp	r26, r22
 1fc:	b7 07       	cpc	r27, r23
 1fe:	10 f0       	brcs	.+4      	; 0x204 <__udivmodhi4_ep>
 200:	a6 1b       	sub	r26, r22
 202:	b7 0b       	sbc	r27, r23

00000204 <__udivmodhi4_ep>:
 204:	88 1f       	adc	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	5a 95       	dec	r21
 20a:	a9 f7       	brne	.-22     	; 0x1f6 <__udivmodhi4_loop>
 20c:	80 95       	com	r24
 20e:	90 95       	com	r25
 210:	bc 01       	movw	r22, r24
 212:	cd 01       	movw	r24, r26
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
