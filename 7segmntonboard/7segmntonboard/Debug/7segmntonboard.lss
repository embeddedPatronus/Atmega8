
7segmntonboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ef  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000135  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000033d  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  000011a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000110  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000005f  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e1       	ldi	r30, 0x14	; 20
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	5a c0       	rjmp	.+180    	; 0x110 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  66:	68 97       	sbiw	r28, 0x18	; 24
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
int a[12]={ 0X3F, 0X06, 0X5B, 0X4F, 0X66, 0X6D, 0X7D, 0X07, 0X7F, 0X67 };
  72:	fe 01       	movw	r30, r28
  74:	31 96       	adiw	r30, 0x01	; 1
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	df 01       	movw	r26, r30
  7a:	1d 92       	st	X+, r1
  7c:	8a 95       	dec	r24
  7e:	e9 f7       	brne	.-6      	; 0x7a <main+0x1c>
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	9a 83       	std	Y+2, r25	; 0x02
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	86 e0       	ldi	r24, 0x06	; 6
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	9c 83       	std	Y+4, r25	; 0x04
  8e:	8b 83       	std	Y+3, r24	; 0x03
  90:	8b e5       	ldi	r24, 0x5B	; 91
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9e 83       	std	Y+6, r25	; 0x06
  96:	8d 83       	std	Y+5, r24	; 0x05
  98:	8f e4       	ldi	r24, 0x4F	; 79
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	98 87       	std	Y+8, r25	; 0x08
  9e:	8f 83       	std	Y+7, r24	; 0x07
  a0:	86 e6       	ldi	r24, 0x66	; 102
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	9a 87       	std	Y+10, r25	; 0x0a
  a6:	89 87       	std	Y+9, r24	; 0x09
  a8:	8d e6       	ldi	r24, 0x6D	; 109
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9c 87       	std	Y+12, r25	; 0x0c
  ae:	8b 87       	std	Y+11, r24	; 0x0b
  b0:	8d e7       	ldi	r24, 0x7D	; 125
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	9e 87       	std	Y+14, r25	; 0x0e
  b6:	8d 87       	std	Y+13, r24	; 0x0d
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	98 8b       	std	Y+16, r25	; 0x10
  be:	8f 87       	std	Y+15, r24	; 0x0f
  c0:	8f e7       	ldi	r24, 0x7F	; 127
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	9a 8b       	std	Y+18, r25	; 0x12
  c6:	89 8b       	std	Y+17, r24	; 0x11
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9c 8b       	std	Y+20, r25	; 0x14
  ce:	8b 8b       	std	Y+19, r24	; 0x13
DDRD=0XFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
while(1)
{
	for( int i=0; i<12; i++)
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTD=a[i];
  dc:	fc 01       	movw	r30, r24
  de:	ee 0f       	add	r30, r30
  e0:	ff 1f       	adc	r31, r31
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	4c 0f       	add	r20, r28
  e8:	5d 1f       	adc	r21, r29
  ea:	e4 0f       	add	r30, r20
  ec:	f5 1f       	adc	r31, r21
  ee:	40 81       	ld	r20, Z
  f0:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	4f ef       	ldi	r20, 0xFF	; 255
  f4:	54 e3       	ldi	r21, 0x34	; 52
  f6:	6c e0       	ldi	r22, 0x0C	; 12
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	50 40       	sbci	r21, 0x00	; 0
  fc:	60 40       	sbci	r22, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x9a>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0xa4>
 102:	00 00       	nop
{
int a[12]={ 0X3F, 0X06, 0X5B, 0X4F, 0X66, 0X6D, 0X7D, 0X07, 0X7F, 0X67 };
DDRD=0XFF;
while(1)
{
	for( int i=0; i<12; i++)
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	8c 30       	cpi	r24, 0x0C	; 12
 108:	91 05       	cpc	r25, r1
 10a:	44 f3       	brlt	.-48     	; 0xdc <main+0x7e>
 10c:	c9 01       	movw	r24, r18
 10e:	e6 cf       	rjmp	.-52     	; 0xdc <main+0x7e>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
